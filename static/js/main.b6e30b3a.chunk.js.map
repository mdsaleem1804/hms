{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","prepareLoginButton","console","log","refs","googleLoginBtn","auth2","attachClickHandler","googleUser","profile","getBasicProfile","getAuthResponse","id_token","getId","getName","getImageUrl","getEmail","error","alert","JSON","stringify","undefined","googleSDK","window","load","init","client_id","cookiepolicy","scope","d","s","id","js","fjs","getElementsByTagName","getElementById","createElement","src","parentNode","insertBefore","document","this","className","ref","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"+LAgFeA,E,4MAxEbC,mBAAqB,WACnBC,QAAQC,IAAI,EAAKC,KAAKC,gBAEtB,EAAKC,MAAMC,mBACT,EAAKH,KAAKC,eACV,IACA,SAACG,GACC,IAAIC,EAAUD,EAAWE,kBACzBR,QAAQC,IAAI,YAAcK,EAAWG,kBAAkBC,UACvDV,QAAQC,IAAI,OAASM,EAAQI,SAC7BX,QAAQC,IAAI,SAAWM,EAAQK,WAC/BZ,QAAQC,IAAI,cAAgBM,EAAQM,eACpCb,QAAQC,IAAI,UAAYM,EAAQO,eAGlC,SAACC,GACCC,MAAMC,KAAKC,UAAUH,OAAOI,EAAW,Q,EAK7CC,UAAY,WACVC,OAAM,gBAAsB,WAC1BA,OAAM,KAASC,KAAK,SAAS,WAC3B,EAAKlB,MAAQiB,OAAM,KAASjB,MAAMmB,KAAK,CACrCC,UACE,2EACFC,aAAc,qBACdC,MAAO,kBAET,EAAK3B,yBAIT,SAAW4B,EAAGC,EAAGC,GACf,IAAIC,EACFC,EAAMJ,EAAEK,qBAAqBJ,GAAG,GAC9BD,EAAEM,eAAeJ,MAGrBC,EAAKH,EAAEO,cAAcN,IAClBC,GAAKA,EACRC,EAAGK,IAAM,gEACTJ,EAAIK,WAAWC,aAAaP,EAAIC,IATlC,CAUGO,SAAU,SAAU,iB,kEAhDvBC,KAAKnB,YACLpB,QAAQC,IAAI,W,+BAmDZ,OACE,yBAAKuC,UAAU,YACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,aAAd,qBACA,yBAAKA,UAAU,aACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,yBACb,4BACEA,UAAU,4BACVC,IAAI,kBAFN,+B,GA9DAC,aCUEC,QACW,cAA7BtB,OAAOuB,SAASC,UAEe,UAA7BxB,OAAOuB,SAASC,UAEhBxB,OAAOuB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFX,SAASL,eAAe,SDyHpB,kBAAmBiB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAzC,GACLf,QAAQe,MAAMA,EAAM0C,a","file":"static/js/main.b6e30b3a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.googleSDK();\r\n    console.log(\"sfsfd\");\r\n  }\r\n\r\n  prepareLoginButton = () => {\r\n    console.log(this.refs.googleLoginBtn);\r\n\r\n    this.auth2.attachClickHandler(\r\n      this.refs.googleLoginBtn,\r\n      {},\r\n      (googleUser) => {\r\n        let profile = googleUser.getBasicProfile();\r\n        console.log(\"Token || \" + googleUser.getAuthResponse().id_token);\r\n        console.log(\"ID: \" + profile.getId());\r\n        console.log(\"Name: \" + profile.getName());\r\n        console.log(\"Image URL: \" + profile.getImageUrl());\r\n        console.log(\"Email: \" + profile.getEmail());\r\n        //YOUR CODE HERE\r\n      },\r\n      (error) => {\r\n        alert(JSON.stringify(error, undefined, 2));\r\n      }\r\n    );\r\n  };\r\n\r\n  googleSDK = () => {\r\n    window[\"googleSDKLoaded\"] = () => {\r\n      window[\"gapi\"].load(\"auth2\", () => {\r\n        this.auth2 = window[\"gapi\"].auth2.init({\r\n          client_id:\r\n            \"424203466352-lpl1v0israd7s1ili9p6ss8aitp2time.apps.googleusercontent.com\",\r\n          cookiepolicy: \"single_host_origin\",\r\n          scope: \"profile email\",\r\n        });\r\n        this.prepareLoginButton();\r\n      });\r\n    };\r\n\r\n    (function (d, s, id) {\r\n      var js,\r\n        fjs = d.getElementsByTagName(s)[0];\r\n      if (d.getElementById(id)) {\r\n        return;\r\n      }\r\n      js = d.createElement(s);\r\n      js.id = id;\r\n      js.src = \"https://apis.google.com/js/platform.js?onload=googleSDKLoaded\";\r\n      fjs.parentNode.insertBefore(js, fjs);\r\n    })(document, \"script\", \"google-jssdk\");\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"row mt-5\">\r\n        <div className=\"col-md-12\">\r\n          <h2 className=\"text-left\">Google Login Demo</h2>\r\n          <div className=\"card mt-3\">\r\n            <div className=\"card-body\">\r\n              <div className=\"row mt-5 mb-5\">\r\n                <div className=\"col-md-4 mt-2 m-auto \">\r\n                  <button\r\n                    className=\"loginBtn loginBtn--google\"\r\n                    ref=\"googleLoginBtn\"\r\n                  >\r\n                    Login with Google\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}