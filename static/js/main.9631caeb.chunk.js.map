{"version":3,"sources":["Components/Common/NavbarPage.js","Components/Common/Helper.js","Components/Common/InputHook.js","Components/Patient/PatientRegistration.js","Components/Patient/PatientList.js","Components/SignIn.js","App.js","serviceWorker.js","index.js"],"names":["NavbarPage","state","isOpen","toggleCollapse","setState","e","preventDefault","localStorage","clear","window","location","href","color","dark","expand","className","onClick","this","id","navbar","usertoken","right","active","to","icon","logOut","bind","Component","helpers","getUrl","helper2","param1","helper3","param2","InputHook","initialValue","useState","value","setValue","reset","onChange","event","target","PatientRegistration","setSubject","useHistory","message","setMessage","subjectCode","bindSubjectCode","resetSubjectCode","subjectName","bindSubjectName","resetSubjectName","Loading","setLoading","alert","button","useEffect","a","fetch","Helper","response","json","data","console","error","Alert","variant","severity","Button","type","fullWidth","disabled","LinearProgress","style","padding","onSubmit","evt","method","body","JSON","stringify","subject_code","subject_name","headers","then","Success","log","catch","md","name","label","required","DatatablePage","loading","Subject","CircularProgress","disableShrink","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","TableBody","map","row","key","scope","singleSubject","subject_id","reload","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","form","width","submit","SignIn","classes","history","loginStatusErrorMessage","setLoginStatusErrorMessage","email","bindEmail","resetEmail","password","bindPassword","resetPassword","Container","maxWidth","CssBaseline","Typography","setItem","push","loginSuccess","TextField","autoComplete","autoFocus","App","Fragment","path","PatientList","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9631caeb.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  MDBNavbar,\r\n  MDBNavbarBrand,\r\n  MDBNavbarNav,\r\n  MDBNavItem,\r\n  MDBNavLink,\r\n  MDBNavbarToggler,\r\n  MDBCollapse,\r\n  MDBIcon,\r\n} from \"mdbreact\";\r\nclass NavbarPage extends Component {\r\n  state = {\r\n    isOpen: false,\r\n  };\r\n\r\n  toggleCollapse = () => {\r\n    this.setState({ isOpen: !this.state.isOpen });\r\n  };\r\n  logOut(e) {\r\n    e.preventDefault();\r\n    localStorage.clear();\r\n    window.location.href = \"./#/\";\r\n  }\r\n  render() {\r\n    return (\r\n      <MDBNavbar color=\"default-color\" dark expand=\"md\">\r\n        <MDBNavbarBrand>\r\n          <strong className=\"white-text\">HMS</strong>\r\n        </MDBNavbarBrand>\r\n        <MDBNavbarToggler onClick={this.toggleCollapse} />\r\n        <MDBCollapse id=\"navbarCollapse3\" isOpen={this.state.isOpen} navbar>\r\n          {!localStorage.usertoken ? (\r\n            <MDBNavbarNav right>\r\n              <MDBNavItem>\r\n                <MDBNavLink to={\"/SignIn\"}>SignIn</MDBNavLink>\r\n              </MDBNavItem>\r\n            </MDBNavbarNav>\r\n          ) : (\r\n            <MDBNavbarNav right>\r\n              <MDBNavItem active>\r\n                <MDBNavLink to=\"#!\">\r\n                  <MDBIcon icon=\"home\" />\r\n                  Dashboard\r\n                </MDBNavLink>\r\n              </MDBNavItem>\r\n              <MDBNavItem>\r\n                <MDBNavLink to={\"/PatientRegistration\"}>\r\n                  <MDBIcon icon=\"user-plus\" />\r\n                  PatientRegistration\r\n                </MDBNavLink>\r\n              </MDBNavItem>\r\n              <MDBNavItem>\r\n                <MDBNavLink to={\"/PatientList\"}>\r\n                  <MDBIcon icon=\"table\" />\r\n                  PatientList\r\n                </MDBNavLink>\r\n              </MDBNavItem>\r\n              <MDBNavItem>\r\n                <MDBNavLink to={\"/SignIn\"} onClick={this.logOut.bind(this)}>\r\n                  <MDBIcon icon=\"sign-out-alt\" />\r\n                  Logout\r\n                </MDBNavLink>\r\n              </MDBNavItem>\r\n            </MDBNavbarNav>\r\n          )}\r\n        </MDBCollapse>\r\n      </MDBNavbar>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavbarPage;\r\n","const helpers = {\r\n  getUrl() {\r\n    return \"http://hellotamila.com/sms_api/\";\r\n  },\r\n  helper2: function (param1) {},\r\n  helper3: function (param1, param2) {},\r\n};\r\n\r\nexport default helpers;\r\n","import { useState } from \"react\";\r\n\r\nexport const InputHook = (initialValue) => {\r\n  const [value, setValue] = useState(initialValue);\r\n\r\n  return {\r\n    value,\r\n    setValue,\r\n    reset: () => setValue(\"\"),\r\n    bind: {\r\n      value,\r\n      onChange: (event) => {\r\n        setValue(event.target.value);\r\n      },\r\n    },\r\n  };\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { MDBRow, MDBCol, MDBInput, MDBBtn } from \"mdbreact\";\r\nimport Helper from \"../Common/Helper\";\r\nimport { InputHook } from \"../Common/InputHook\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nconst PatientRegistration = () => {\r\n  const [Subject, setSubject] = useState([]);\r\n  const history = useHistory();\r\n\r\n  const [message, setMessage] = useState(\"\");\r\n  const {\r\n    value: subjectCode,\r\n    bind: bindSubjectCode,\r\n    reset: resetSubjectCode,\r\n  } = InputHook(\"\");\r\n  const {\r\n    value: subjectName,\r\n    bind: bindSubjectName,\r\n    reset: resetSubjectName,\r\n  } = InputHook(\"\");\r\n  const [Loading, setLoading] = useState(false);\r\n  function Success(response) {\r\n    setMessage(response.message);\r\n    //history.push(\"/PatientList\");\r\n  }\r\n  function Fail() {\r\n    setMessage(\"Record Not Created\");\r\n    setLoading(false);\r\n  }\r\n  const handleSubmit = (evt) => {\r\n    evt.preventDefault();\r\n    setLoading(true);\r\n    setMessage(\"\");\r\n    fetch(Helper.getUrl() + \"subject\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        subject_code: subjectCode,\r\n        subject_name: subjectName,\r\n      }),\r\n      headers: {\r\n        \"Content-type\": \"application/json; charset=UTF-8\",\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        setLoading(false);\r\n        response.message === \"Subject successfully added\"\r\n          ? Success(response)\r\n          : Fail();\r\n        console.log(response);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        setMessage(\"Server Error.\");\r\n        setLoading(false);\r\n      });\r\n\r\n    resetSubjectCode();\r\n    resetSubjectName();\r\n    //window.location.reload(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    (async function () {\r\n      try {\r\n        const response = await fetch(Helper.getUrl() + \"subject\");\r\n        const json = await response.json();\r\n        setSubject(json.data);\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  let alert, button;\r\n  if (message === \"\") {\r\n  } else {\r\n    alert = (\r\n      <Alert variant=\"filled\" severity=\"warning\">\r\n        {message}\r\n      </Alert>\r\n    );\r\n  }\r\n  if (Loading) {\r\n    button = (\r\n      <div>\r\n        <Button\r\n          type=\"submit\"\r\n          fullWidth\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          disabled\r\n        >\r\n          Save\r\n        </Button>\r\n\r\n        <LinearProgress color=\"secondary\" />\r\n      </div>\r\n    );\r\n  } else {\r\n    button = (\r\n      <Button type=\"submit\" fullWidth variant=\"contained\" color=\"primary\">\r\n        Save\r\n      </Button>\r\n    );\r\n  }\r\n  return (\r\n    <div style={{ padding: 30 }}>\r\n      <form className=\"needs-validation\" onSubmit={handleSubmit}>\r\n        <MDBRow>\r\n          <MDBCol md=\"4\">\r\n            <MDBInput\r\n              name=\"subject_code\"\r\n              type=\"text\"\r\n              id=\"subject_code\"\r\n              label=\"SubjectCode\"\r\n              required\r\n              {...bindSubjectCode}\r\n            ></MDBInput>\r\n          </MDBCol>\r\n          <MDBCol md=\"4\">\r\n            <MDBInput\r\n              name=\"subject_name\"\r\n              type=\"text\"\r\n              id=\"subject_name\"\r\n              label=\"SubjectName\"\r\n              required\r\n              {...bindSubjectName}\r\n            ></MDBInput>\r\n          </MDBCol>\r\n          <MDBCol md=\"2\">{button}</MDBCol>\r\n        </MDBRow>\r\n        <hr />\r\n        {alert}\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PatientRegistration;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport Helper from \"../Common/Helper\";\r\nimport { MDBBtn } from \"mdbreact\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\n\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nconst DatatablePage = () => {\r\n  const [Loading, setLoading] = useState(false);\r\n  const [Subject, setSubject] = useState([]);\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    (async function () {\r\n      try {\r\n        const response = await fetch(Helper.getUrl() + \"subject\");\r\n        const json = await response.json();\r\n        setSubject(json.data);\r\n        setLoading(false);\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    })();\r\n  }, []);\r\n  function deleteSubject(id) {\r\n    fetch(Helper.getUrl() + \"subject\", {\r\n      method: \"DELETE\",\r\n      body: JSON.stringify({\r\n        subject_id: id,\r\n      }),\r\n      headers: {\r\n        \"Content-type\": \"application/json; charset=UTF-8\",\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then(() => window.location.reload(false));\r\n  }\r\n  function editSubject(singleSubject) {\r\n    // setSubjectName(singleSubject.subject_name);\r\n    console.log(singleSubject);\r\n  }\r\n  let loading;\r\n  if (Loading) {\r\n    loading = <CircularProgress disableShrink />;\r\n  }\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table aria-label=\"simple table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Subject Code</TableCell>\r\n            <TableCell>Subject Name</TableCell>\r\n\r\n            <TableCell>Action</TableCell>\r\n          </TableRow>\r\n          {loading}\r\n        </TableHead>\r\n        <TableBody>\r\n          {Subject.map((row) => (\r\n            <TableRow key={row.subject_name}>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                {row.subject_code}\r\n              </TableCell>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                {row.subject_name}\r\n              </TableCell>\r\n\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                <EditIcon color=\"primary\" onClick={() => editSubject(row)} />\r\n\r\n                <DeleteIcon\r\n                  color=\"secondary\"\r\n                  onClick={() => deleteSubject(row.subject_id)}\r\n                />\r\n              </TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n};\r\n\r\nexport default DatatablePage;\r\n","import React, { useState } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport { InputHook } from \"../Components/Common/InputHook\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport Helper from \"../Components/Common/Helper\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(2),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nexport default function SignIn() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n\r\n  const [loginStatusErrorMessage, setLoginStatusErrorMessage] = useState(\"\");\r\n  const [Loading, setLoading] = useState(false);\r\n\r\n  const { value: email, bind: bindEmail, reset: resetEmail } = InputHook(\"\");\r\n  const {\r\n    value: password,\r\n    bind: bindPassword,\r\n    reset: resetPassword,\r\n  } = InputHook(\"\");\r\n  function loginSuccess(response) {\r\n    localStorage.setItem(\"usertoken\", response.data);\r\n    history.push(\"/PatientRegistration\");\r\n    window.location.reload(false);\r\n  }\r\n  function loginFail() {\r\n    setLoginStatusErrorMessage(\"Please check with your credentials\");\r\n    setLoading(false);\r\n  }\r\n  const handleSubmit = (evt) => {\r\n    evt.preventDefault();\r\n    setLoading(true);\r\n    setLoginStatusErrorMessage(\"\");\r\n\r\n    fetch(Helper.getUrl() + \"auth\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        email: email,\r\n        password: password,\r\n      }),\r\n      headers: {\r\n        \"Content-type\": \"application/json; charset=UTF-8\",\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        setLoading(false);\r\n        response.message === \"success\" ? loginSuccess(response) : loginFail();\r\n        console.log(response);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        setLoginStatusErrorMessage(\"Server Error.\");\r\n        setLoading(false);\r\n      });\r\n    resetEmail();\r\n    resetPassword();\r\n  };\r\n  let alert, button;\r\n  if (loginStatusErrorMessage === \"\") {\r\n  } else {\r\n    alert = (\r\n      <Alert variant=\"filled\" severity=\"error\">\r\n        {loginStatusErrorMessage}\r\n      </Alert>\r\n    );\r\n  }\r\n  if (Loading) {\r\n    button = (\r\n      <div>\r\n        <Button\r\n          type=\"submit\"\r\n          fullWidth\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          disabled\r\n          className={classes.submit}\r\n        >\r\n          Sign In\r\n        </Button>\r\n\r\n        <LinearProgress color=\"secondary\" />\r\n      </div>\r\n    );\r\n  } else {\r\n    button = (\r\n      <Button\r\n        type=\"submit\"\r\n        fullWidth\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        className={classes.submit}\r\n      >\r\n        Sign In\r\n      </Button>\r\n    );\r\n  }\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Sign in\r\n        </Typography>\r\n        {alert}\r\n        <form className={classes.form} onSubmit={handleSubmit}>\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            id=\"email\"\r\n            label=\"Email Address\"\r\n            name=\"email\"\r\n            autoComplete=\"email\"\r\n            autoFocus\r\n            {...bindEmail}\r\n          />\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            name=\"password\"\r\n            label=\"Password\"\r\n            type=\"password\"\r\n            id=\"password\"\r\n            autoComplete=\"current-password\"\r\n            {...bindPassword}\r\n          />\r\n\r\n          {button}\r\n        </form>\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\n\nimport NavbarPage from \"./Components/Common/NavbarPage\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport PatientRegistration from \"./Components/Patient/PatientRegistration\";\nimport PatientList from \"./Components/Patient/PatientList\";\nimport SignIn from \"./Components/SignIn\";\nfunction App() {\n  return (\n    <Router>\n      <React.Fragment>\n        <NavbarPage />\n        <Switch>\n          <Route path=\"/SignIn\" component={() => <SignIn />} />\n          <Route\n            path=\"/PatientRegistration\"\n            component={() => <PatientRegistration />}\n          />\n          <Route path=\"/PatientList\" component={() => <PatientList />} />\n        </Switch>\n      </React.Fragment>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}