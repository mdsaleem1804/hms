{"version":3,"sources":["logo.svg","Components/Common/NavbarPage.js","Components/Patient/PatientList.js","Components/Patient/PatientRegistration.js","Components/Common/FooterPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavbarPage","state","isOpen","toggleCollapse","setState","color","dark","expand","className","onClick","this","id","navbar","left","active","to","nav","caret","href","right","fab","icon","Component","TablePage","props","data","columns","label","field","sort","rows","heading0","heading1","heading2","heading3","heading4","heading5","heading6","heading7","heading8","responsive","FormsPage","fname","lname","email","city","zip","options","text","value","submitHandler","event","preventDefault","target","changeHandler","name","getPickerValue","console","log","style","padding","onSubmit","noValidate","md","onChange","type","required","PatientList","React","FooterPage","fluid","Date","getFullYear","App","PatientRegistration","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ccd098f0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\nimport {\r\n  MDBNavbar,\r\n  MDBNavbarBrand,\r\n  MDBNavbarNav,\r\n  MDBNavItem,\r\n  MDBNavLink,\r\n  MDBNavbarToggler,\r\n  MDBCollapse,\r\n  MDBDropdown,\r\n  MDBDropdownToggle,\r\n  MDBDropdownMenu,\r\n  MDBDropdownItem,\r\n  MDBIcon,\r\n} from \"mdbreact\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\n\r\nclass NavbarPage extends Component {\r\n  state = {\r\n    isOpen: false,\r\n  };\r\n\r\n  toggleCollapse = () => {\r\n    this.setState({ isOpen: !this.state.isOpen });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <MDBNavbar color=\"default-color\" dark expand=\"md\">\r\n          <MDBNavbarBrand>\r\n            <strong className=\"white-text\">Navbar</strong>\r\n          </MDBNavbarBrand>\r\n          <MDBNavbarToggler onClick={this.toggleCollapse} />\r\n          <MDBCollapse id=\"navbarCollapse3\" isOpen={this.state.isOpen} navbar>\r\n            <MDBNavbarNav left>\r\n              <MDBNavItem active>\r\n                <MDBNavLink to=\"#!\">Home</MDBNavLink>\r\n              </MDBNavItem>\r\n              <MDBNavItem>\r\n                <MDBNavLink to=\"#!\">Features</MDBNavLink>\r\n              </MDBNavItem>\r\n              <MDBNavItem>\r\n                <MDBNavLink to=\"#!\">Pricing</MDBNavLink>\r\n              </MDBNavItem>\r\n              <MDBNavItem>\r\n                <MDBDropdown>\r\n                  <MDBDropdownToggle nav caret>\r\n                    <div className=\"d-none d-md-inline\">Dropdown</div>\r\n                  </MDBDropdownToggle>\r\n                  <MDBDropdownMenu className=\"dropdown-default\">\r\n                    <MDBDropdownItem href=\"#!\">Action</MDBDropdownItem>\r\n                    <MDBDropdownItem href=\"#!\">Another Action</MDBDropdownItem>\r\n                    <MDBDropdownItem href=\"#!\">\r\n                      Something else here\r\n                    </MDBDropdownItem>\r\n                    <MDBDropdownItem href=\"#!\">\r\n                      Something else here\r\n                    </MDBDropdownItem>\r\n                  </MDBDropdownMenu>\r\n                </MDBDropdown>\r\n              </MDBNavItem>\r\n            </MDBNavbarNav>\r\n            <MDBNavbarNav right>\r\n              <MDBNavItem>\r\n                <MDBNavLink className=\"waves-effect waves-light\" to=\"#!\">\r\n                  <MDBIcon fab icon=\"twitter\" />\r\n                </MDBNavLink>\r\n              </MDBNavItem>\r\n              <MDBNavItem>\r\n                <MDBNavLink className=\"waves-effect waves-light\" to=\"#!\">\r\n                  <MDBIcon fab icon=\"google-plus-g\" />\r\n                </MDBNavLink>\r\n              </MDBNavItem>\r\n              <MDBNavItem>\r\n                <MDBDropdown>\r\n                  <MDBDropdownToggle nav caret>\r\n                    <MDBIcon icon=\"user\" />\r\n                  </MDBDropdownToggle>\r\n                  <MDBDropdownMenu className=\"dropdown-default\">\r\n                    <MDBDropdownItem href=\"#!\">Action</MDBDropdownItem>\r\n                    <MDBDropdownItem href=\"#!\">Another Action</MDBDropdownItem>\r\n                    <MDBDropdownItem href=\"#!\">\r\n                      Something else here\r\n                    </MDBDropdownItem>\r\n                    <MDBDropdownItem href=\"#!\">\r\n                      Something else here\r\n                    </MDBDropdownItem>\r\n                  </MDBDropdownMenu>\r\n                </MDBDropdown>\r\n              </MDBNavItem>\r\n            </MDBNavbarNav>\r\n          </MDBCollapse>\r\n        </MDBNavbar>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavbarPage;\r\n","import React from \"react\";\r\nimport { MDBTable, MDBTableBody, MDBTableHead } from \"mdbreact\";\r\n\r\nconst TablePage = (props) => {\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"#\",\r\n        field: \"id\",\r\n        sort: \"asc\",\r\n      },\r\n      {\r\n        label: \"Heading\",\r\n        field: \"heading0\",\r\n        sort: \"asc\",\r\n      },\r\n      {\r\n        label: \"Heading\",\r\n        field: \"heading1\",\r\n        sort: \"asc\",\r\n      },\r\n      {\r\n        label: \"Heading\",\r\n        field: \"heading2\",\r\n        sort: \"asc\",\r\n      },\r\n      {\r\n        label: \"Heading\",\r\n        field: \"heading3\",\r\n        sort: \"asc\",\r\n      },\r\n      {\r\n        label: \"Heading\",\r\n        field: \"heading4\",\r\n        sort: \"asc\",\r\n      },\r\n      {\r\n        label: \"Heading\",\r\n        field: \"heading5\",\r\n        sort: \"asc\",\r\n      },\r\n      {\r\n        label: \"Heading\",\r\n        field: \"heading6\",\r\n        sort: \"asc\",\r\n      },\r\n      {\r\n        label: \"Heading\",\r\n        field: \"heading7\",\r\n        sort: \"asc\",\r\n      },\r\n      {\r\n        label: \"Heading\",\r\n        field: \"heading8\",\r\n        sort: \"asc\",\r\n      },\r\n    ],\r\n    rows: [\r\n      {\r\n        id: 1,\r\n        heading0: \"Cell\",\r\n        heading1: \"Cell\",\r\n        heading2: \"Cell\",\r\n        heading3: \"Cell\",\r\n        heading4: \"Cell\",\r\n        heading5: \"Cell\",\r\n        heading6: \"Cell\",\r\n        heading7: \"Cell\",\r\n        heading8: \"Cell\",\r\n      },\r\n      {\r\n        id: 2,\r\n        heading0: \"Cell\",\r\n        heading1: \"Cell\",\r\n        heading2: \"Cell\",\r\n        heading3: \"Cell\",\r\n        heading4: \"Cell\",\r\n        heading5: \"Cell\",\r\n        heading6: \"Cell\",\r\n        heading7: \"Cell\",\r\n        heading8: \"Cell\",\r\n      },\r\n      {\r\n        id: 3,\r\n        heading0: \"Cell\",\r\n        heading1: \"Cell\",\r\n        heading2: \"Cell\",\r\n        heading3: \"Cell\",\r\n        heading4: \"Cell\",\r\n        heading5: \"Cell\",\r\n        heading6: \"Cell\",\r\n        heading7: \"Cell\",\r\n        heading8: \"Cell\",\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <MDBTable responsive>\r\n      <MDBTableHead columns={data.columns} />\r\n      <MDBTableBody rows={data.rows} />\r\n    </MDBTable>\r\n  );\r\n};\r\n\r\nexport default TablePage;\r\n","import React from \"react\";\r\nimport { MDBRow, MDBCol, MDBInput, MDBBtn, MDBContainer } from \"mdbreact\";\r\nimport PatientList from \"./PatientList\";\r\nclass FormsPage extends React.Component {\r\n  state = {\r\n    fname: \"Mark\",\r\n    lname: \"Otto\",\r\n    email: \"\",\r\n    city: \"\",\r\n    state: \"\",\r\n    zip: \"\",\r\n    options: [\r\n      {\r\n        text: \"Option 1\",\r\n        value: \"1\",\r\n      },\r\n      {\r\n        text: \"Option 2\",\r\n        value: \"2\",\r\n      },\r\n      {\r\n        text: \"Option 3\",\r\n        value: \"3\",\r\n      },\r\n    ],\r\n  };\r\n\r\n  submitHandler = (event) => {\r\n    event.preventDefault();\r\n    event.target.className += \" was-validated\";\r\n  };\r\n\r\n  changeHandler = (event) => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n  getPickerValue = (value) => {\r\n    console.log(value);\r\n  };\r\n  render() {\r\n    return (\r\n      <div style={{ padding: 30 }}>\r\n        <form\r\n          className=\"needs-validation\"\r\n          onSubmit={this.submitHandler}\r\n          noValidate\r\n        >\r\n          <MDBRow>\r\n            <MDBCol md=\"4\">\r\n              <MDBInput\r\n                value={this.state.fname}\r\n                name=\"fname\"\r\n                onChange={this.changeHandler}\r\n                type=\"text\"\r\n                id=\"materialFormRegisterNameEx\"\r\n                label=\"First name\"\r\n                required\r\n              >\r\n                <div className=\"valid-tooltip\">Looks good!</div>\r\n              </MDBInput>\r\n            </MDBCol>\r\n            <MDBCol md=\"4\">\r\n              <MDBInput\r\n                value={this.state.lname}\r\n                name=\"lname\"\r\n                onChange={this.changeHandler}\r\n                type=\"text\"\r\n                id=\"materialFormRegisterEmailEx2\"\r\n                label=\"Last name\"\r\n                required\r\n              >\r\n                <div className=\"valid-tooltip\">Looks good!</div>\r\n              </MDBInput>\r\n            </MDBCol>\r\n            <MDBCol md=\"4\">\r\n              <MDBInput\r\n                value={this.state.email}\r\n                onChange={this.changeHandler}\r\n                type=\"email\"\r\n                id=\"materialFormRegisterConfirmEx3\"\r\n                name=\"email\"\r\n                label=\"Your Email address\"\r\n              ></MDBInput>\r\n            </MDBCol>\r\n          </MDBRow>\r\n          <MDBRow>\r\n            <MDBCol md=\"4\">\r\n              <MDBInput\r\n                value={this.state.city}\r\n                onChange={this.changeHandler}\r\n                type=\"text\"\r\n                id=\"materialFormRegisterPasswordEx4\"\r\n                name=\"city\"\r\n                label=\"City\"\r\n                required\r\n              >\r\n                <div className=\"invalid-tooltip\">\r\n                  Please provide a valid city.\r\n                </div>\r\n                <div className=\"valid-tooltip\">Looks good!</div>\r\n              </MDBInput>\r\n            </MDBCol>\r\n            <MDBCol md=\"4\">\r\n              <MDBInput\r\n                value={this.state.state}\r\n                onChange={this.changeHandler}\r\n                type=\"text\"\r\n                id=\"materialFormRegisterPasswordEx4\"\r\n                name=\"state\"\r\n                label=\"State\"\r\n                required\r\n              >\r\n                <div className=\"invalid-tooltip\">\r\n                  Please provide a valid state.\r\n                </div>\r\n                <div className=\"valid-tooltip\">Looks good!</div>\r\n              </MDBInput>\r\n            </MDBCol>\r\n            <MDBCol md=\"4\">\r\n              <MDBInput\r\n                value={this.state.zip}\r\n                onChange={this.changeHandler}\r\n                type=\"text\"\r\n                id=\"materialFormRegisterPasswordEx4\"\r\n                name=\"zip\"\r\n                label=\"Zip\"\r\n                required\r\n              >\r\n                <div className=\"invalid-tooltip\">\r\n                  Please provide a valid zip.\r\n                </div>\r\n                <div className=\"valid-tooltip\">Looks good!</div>\r\n              </MDBInput>\r\n            </MDBCol>\r\n          </MDBRow>\r\n          <MDBRow></MDBRow>\r\n\r\n          <MDBBtn color=\"success\" type=\"submit\">\r\n            Submit Form\r\n          </MDBBtn>\r\n        </form>\r\n        <PatientList />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FormsPage;\r\n","import React from \"react\";\r\nimport { MDBCol, MDBContainer, MDBRow, MDBFooter } from \"mdbreact\";\r\n\r\nconst FooterPage = () => {\r\n  return (\r\n    <MDBFooter color=\"blue\" className=\"font-small pt-4 mt-4\">\r\n      <MDBContainer fluid className=\"text-center text-md-left\">\r\n        <MDBRow>\r\n          <MDBCol md=\"6\">\r\n            <h5 className=\"title\">Footer Content</h5>\r\n            <p>\r\n              Here you can use rows and columns here to organize your footer\r\n              content.\r\n            </p>\r\n          </MDBCol>\r\n          <MDBCol md=\"6\">\r\n            <h5 className=\"title\">Links</h5>\r\n            <ul>\r\n              <li className=\"list-unstyled\">\r\n                <a href=\"#!\">Link 1</a>\r\n              </li>\r\n              <li className=\"list-unstyled\">\r\n                <a href=\"#!\">Link 2</a>\r\n              </li>\r\n              <li className=\"list-unstyled\">\r\n                <a href=\"#!\">Link 3</a>\r\n              </li>\r\n              <li className=\"list-unstyled\">\r\n                <a href=\"#!\">Link 4</a>\r\n              </li>\r\n            </ul>\r\n          </MDBCol>\r\n        </MDBRow>\r\n      </MDBContainer>\r\n      <div className=\"footer-copyright text-center py-3\">\r\n        <MDBContainer fluid>\r\n          &copy; {new Date().getFullYear()} Copyright:{\" \"}\r\n          <a href=\"https://www.mdbootstrap.com\"> MDBootstrap.com </a>\r\n        </MDBContainer>\r\n      </div>\r\n    </MDBFooter>\r\n  );\r\n};\r\n\r\nexport default FooterPage;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport FormPage from \"./Components/FormRegister\";\nimport FormLogin from \"./Components/FormLogin\";\n\nimport NavbarPage from \"./Components/Common/NavbarPage\";\nimport PatientRegistration from \"./Components/Patient/PatientRegistration\";\nimport FooterPage from \"./Components/Common/FooterPage\";\n\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header>\n        <NavbarPage />\n        <PatientRegistration />\n        <FooterPage />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}