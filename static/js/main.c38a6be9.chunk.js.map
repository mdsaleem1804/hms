{"version":3,"sources":["logo.svg","Components/Common/NavbarPage.js","Components/Patient/PatientList.js","Components/Patient/PatientRegistration.js","Components/Common/FooterPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavbarPage","state","isOpen","toggleCollapse","setState","color","dark","expand","className","onClick","this","id","navbar","left","active","to","fab","icon","Component","DatatablePage","useState","Subject","setSubject","useEffect","a","fetch","response","json","data","console","error","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","TableBody","map","row","key","subject_name","scope","subject_code","size","PatientRegistration","fname","lname","email","city","zip","options","text","value","submitHandler","event","preventDefault","target","changeHandler","name","getPickerValue","log","style","padding","onSubmit","noValidate","md","onChange","type","label","required","PatientList","React","FooterPage","fluid","href","Date","getFullYear","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c38a6be9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\nimport {\r\n  MDBNavbar,\r\n  MDBNavbarBrand,\r\n  MDBNavbarNav,\r\n  MDBNavItem,\r\n  MDBNavLink,\r\n  MDBNavbarToggler,\r\n  MDBCollapse,\r\n  MDBDropdown,\r\n  MDBDropdownToggle,\r\n  MDBDropdownMenu,\r\n  MDBDropdownItem,\r\n  MDBIcon,\r\n} from \"mdbreact\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\n\r\nclass NavbarPage extends Component {\r\n  state = {\r\n    isOpen: false,\r\n  };\r\n\r\n  toggleCollapse = () => {\r\n    this.setState({ isOpen: !this.state.isOpen });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <MDBNavbar color=\"default-color\" dark expand=\"md\">\r\n          <MDBNavbarBrand>\r\n            <strong className=\"white-text\">HMS</strong>\r\n          </MDBNavbarBrand>\r\n          <MDBNavbarToggler onClick={this.toggleCollapse} />\r\n          <MDBCollapse id=\"navbarCollapse3\" isOpen={this.state.isOpen} navbar>\r\n            <MDBNavbarNav left>\r\n              <MDBNavItem active>\r\n                <MDBNavLink to=\"#!\">\r\n                  <MDBIcon fab icon=\"google-plus-g\" />\r\n                  Dashboard\r\n                </MDBNavLink>\r\n              </MDBNavItem>\r\n              <MDBNavItem>\r\n                <MDBNavLink to=\"#!\">User</MDBNavLink>\r\n              </MDBNavItem>\r\n              <MDBNavItem>\r\n                <MDBNavLink to=\"#!\">Patient</MDBNavLink>\r\n              </MDBNavItem>\r\n            </MDBNavbarNav>\r\n          </MDBCollapse>\r\n        </MDBNavbar>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavbarPage;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\n\r\nimport { MDBBtn } from \"mdbreact\";\r\nconst DatatablePage = () => {\r\n  const [Subject, setSubject] = useState([]);\r\n  useEffect(() => {\r\n    (async function () {\r\n      try {\r\n        const response = await fetch(`http://localhost:1000/subject`);\r\n        const json = await response.json();\r\n        setSubject(json.data);\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    })();\r\n  }, []);\r\n  //console.log(data1);\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"Subject Code\",\r\n        field: \"subject_code\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Subject Name\",\r\n        field: \"subject_name\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n    ],\r\n    rows: Subject,\r\n  };\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table aria-label=\"simple table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Subject Name</TableCell>\r\n            <TableCell>Subject Code</TableCell>\r\n            <TableCell>Action</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {Subject.map((row) => (\r\n            <TableRow key={row.subject_name}>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                {row.subject_code}\r\n              </TableCell>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                {row.subject_name}\r\n              </TableCell>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                <MDBBtn color=\"success\" size=\"sm\">\r\n                  Edit\r\n                </MDBBtn>\r\n              </TableCell>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                <MDBBtn color=\"danger\" size=\"sm\">\r\n                  Delete\r\n                </MDBBtn>\r\n              </TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n};\r\n\r\nexport default DatatablePage;\r\n","import React from \"react\";\r\nimport { MDBRow, MDBCol, MDBInput, MDBBtn } from \"mdbreact\";\r\nimport PatientList from \"./PatientList\";\r\nclass PatientRegistration extends React.Component {\r\n  state = {\r\n    fname: \"\",\r\n    lname: \"\",\r\n    email: \"\",\r\n    city: \"\",\r\n    state: \"\",\r\n    zip: \"\",\r\n    options: [\r\n      {\r\n        text: \"Option 1\",\r\n        value: \"1\",\r\n      },\r\n      {\r\n        text: \"Option 2\",\r\n        value: \"2\",\r\n      },\r\n      {\r\n        text: \"Option 3\",\r\n        value: \"3\",\r\n      },\r\n    ],\r\n  };\r\n\r\n  submitHandler = (event) => {\r\n    event.preventDefault();\r\n    event.target.className += \" was-validated\";\r\n  };\r\n\r\n  changeHandler = (event) => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n  getPickerValue = (value) => {\r\n    console.log(value);\r\n  };\r\n  render() {\r\n    return (\r\n      <div style={{ padding: 30 }}>\r\n        <form\r\n          className=\"needs-validation\"\r\n          onSubmit={this.submitHandler}\r\n          noValidate\r\n        >\r\n          <MDBRow>\r\n            <MDBCol md=\"4\">\r\n              <MDBInput\r\n                value={this.state.fname}\r\n                name=\"fname\"\r\n                onChange={this.changeHandler}\r\n                type=\"text\"\r\n                id=\"materialFormRegisterNameEx\"\r\n                label=\"First name\"\r\n                required\r\n              ></MDBInput>\r\n            </MDBCol>\r\n            <MDBCol md=\"4\">\r\n              <MDBInput\r\n                value={this.state.lname}\r\n                name=\"fname\"\r\n                onChange={this.changeHandler}\r\n                type=\"text\"\r\n                id=\"materialFormRegisterNameEx\"\r\n                label=\"Last name\"\r\n                required\r\n              ></MDBInput>\r\n            </MDBCol>\r\n            <MDBCol md=\"2\">\r\n              <MDBBtn color=\"success\" type=\"submit\">\r\n                Submit Form\r\n              </MDBBtn>\r\n            </MDBCol>\r\n          </MDBRow>\r\n          <hr />\r\n        </form>\r\n        <PatientList />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PatientRegistration;\r\n","import React from \"react\";\r\nimport { MDBCol, MDBContainer, MDBRow, MDBFooter } from \"mdbreact\";\r\n\r\nconst FooterPage = () => {\r\n  return (\r\n    <MDBFooter color=\"blue\" className=\"font-small pt-4 mt-4\">\r\n      <MDBContainer fluid className=\"text-center text-md-left\">\r\n        <MDBRow>\r\n          <MDBCol md=\"6\">\r\n            <h5 className=\"title\">Footer Content</h5>\r\n            <p>\r\n              Here you can use rows and columns here to organize your footer\r\n              content.\r\n            </p>\r\n          </MDBCol>\r\n          <MDBCol md=\"6\">\r\n            <h5 className=\"title\">Links</h5>\r\n            <ul>\r\n              <li className=\"list-unstyled\">\r\n                <a href=\"#!\">Link 1</a>\r\n              </li>\r\n              <li className=\"list-unstyled\">\r\n                <a href=\"#!\">Link 2</a>\r\n              </li>\r\n              <li className=\"list-unstyled\">\r\n                <a href=\"#!\">Link 3</a>\r\n              </li>\r\n              <li className=\"list-unstyled\">\r\n                <a href=\"#!\">Link 4</a>\r\n              </li>\r\n            </ul>\r\n          </MDBCol>\r\n        </MDBRow>\r\n      </MDBContainer>\r\n      <div className=\"footer-copyright text-center py-3\">\r\n        <MDBContainer fluid>\r\n          &copy; {new Date().getFullYear()} Copyright:{\" \"}\r\n          <a href=\"https://www.mdbootstrap.com\"> MDBootstrap.com </a>\r\n        </MDBContainer>\r\n      </div>\r\n    </MDBFooter>\r\n  );\r\n};\r\n\r\nexport default FooterPage;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport FormPage from \"./Components/FormRegister\";\nimport FormLogin from \"./Components/FormLogin\";\n\nimport NavbarPage from \"./Components/Common/NavbarPage\";\nimport PatientRegistration from \"./Components/Patient/PatientRegistration\";\nimport FooterPage from \"./Components/Common/FooterPage\";\n\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header>\n        <NavbarPage />\n        <PatientRegistration />\n        <FooterPage />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}