{"version":3,"sources":["Components/Common/NavbarPage.js","Components/Common/Helper.js","Components/Common/InputHook.js","Components/Patient/PatientRegistration.js","Components/Patient/PatientList.js","App.js","serviceWorker.js","index.js"],"names":["NavbarPage","state","isOpen","toggleCollapse","setState","color","dark","expand","className","onClick","this","id","navbar","right","active","to","fab","icon","Component","helpers","getUrl","helper2","param1","helper3","param2","InputHook","initialValue","useState","value","setValue","reset","bind","onChange","event","target","PatientRegistration","Subject","setSubject","subjectCode","bindSubjectCode","resetSubjectCode","subjectName","bindSubjectName","resetSubjectName","useEffect","a","fetch","Helper","response","json","data","console","error","style","padding","onSubmit","evt","preventDefault","method","body","JSON","stringify","subject_code","subject_name","headers","then","log","window","location","reload","md","name","type","label","required","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","TableBody","map","row","key","scope","singleSubject","subject_id","DatatablePage","Button","variant","size","startIcon","App","Fragment","path","PatientList","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.6e4a8dae.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  MDBNavbar,\r\n  MDBNavbarBrand,\r\n  MDBNavbarNav,\r\n  MDBNavItem,\r\n  MDBNavLink,\r\n  MDBNavbarToggler,\r\n  MDBCollapse,\r\n  MDBIcon,\r\n} from \"mdbreact\";\r\nclass NavbarPage extends Component {\r\n  state = {\r\n    isOpen: false,\r\n  };\r\n\r\n  toggleCollapse = () => {\r\n    this.setState({ isOpen: !this.state.isOpen });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <MDBNavbar color=\"default-color\" dark expand=\"md\">\r\n        <MDBNavbarBrand>\r\n          <strong className=\"white-text\">HMS</strong>\r\n        </MDBNavbarBrand>\r\n        <MDBNavbarToggler onClick={this.toggleCollapse} />\r\n        <MDBCollapse id=\"navbarCollapse3\" isOpen={this.state.isOpen} navbar>\r\n          <MDBNavbarNav right>\r\n            <MDBNavItem active>\r\n              <MDBNavLink to=\"#!\">\r\n                <MDBIcon fab icon=\"google-plus-g\" />\r\n                Dashboard\r\n              </MDBNavLink>\r\n            </MDBNavItem>\r\n            <MDBNavItem>\r\n              <MDBNavLink to={\"/PatientRegistration\"}>\r\n                PatientRegistration\r\n              </MDBNavLink>\r\n            </MDBNavItem>\r\n            <MDBNavItem>\r\n              <MDBNavLink to={\"/PatientList\"}>PatientList</MDBNavLink>\r\n            </MDBNavItem>\r\n          </MDBNavbarNav>\r\n        </MDBCollapse>\r\n      </MDBNavbar>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavbarPage;\r\n","const helpers = {\r\n  getUrl() {\r\n    return \"http://hellotamila.com/sms_api/\";\r\n  },\r\n  helper2: function (param1) {},\r\n  helper3: function (param1, param2) {},\r\n};\r\n\r\nexport default helpers;\r\n","import { useState } from \"react\";\r\n\r\nexport const InputHook = (initialValue) => {\r\n  const [value, setValue] = useState(initialValue);\r\n\r\n  return {\r\n    value,\r\n    setValue,\r\n    reset: () => setValue(\"\"),\r\n    bind: {\r\n      value,\r\n      onChange: (event) => {\r\n        setValue(event.target.value);\r\n      },\r\n    },\r\n  };\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { MDBRow, MDBCol, MDBInput, MDBBtn } from \"mdbreact\";\r\nimport Helper from \"../Common/Helper\";\r\nimport { InputHook } from \"../Common/InputHook\";\r\nconst PatientRegistration = () => {\r\n  const [Subject, setSubject] = useState([]);\r\n  const {\r\n    value: subjectCode,\r\n    bind: bindSubjectCode,\r\n    reset: resetSubjectCode,\r\n  } = InputHook(\"\");\r\n  const {\r\n    value: subjectName,\r\n    bind: bindSubjectName,\r\n    reset: resetSubjectName,\r\n  } = InputHook(\"\");\r\n  const handleSubmit = (evt) => {\r\n    evt.preventDefault();\r\n    fetch(Helper.getUrl() + \"subject\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        subject_code: subjectCode,\r\n        subject_name: subjectName,\r\n      }),\r\n      headers: {\r\n        \"Content-type\": \"application/json; charset=UTF-8\",\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((json) => console.log(json));\r\n    resetSubjectCode();\r\n    resetSubjectName();\r\n    window.location.reload(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    (async function () {\r\n      try {\r\n        const response = await fetch(Helper.getUrl() + \"subject\");\r\n        const json = await response.json();\r\n        setSubject(json.data);\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    })();\r\n  }, []);\r\n  function deleteSubject(id) {\r\n    fetch(Helper.getUrl() + \"subject\", {\r\n      method: \"DELETE\",\r\n      body: JSON.stringify({\r\n        subject_id: id,\r\n      }),\r\n      headers: {\r\n        \"Content-type\": \"application/json; charset=UTF-8\",\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then(() => window.location.reload(false));\r\n  }\r\n  function editSubject(singleSubject) {\r\n    // setSubjectName(singleSubject.subject_name);\r\n    console.log(singleSubject);\r\n  }\r\n  return (\r\n    <div style={{ padding: 30 }}>\r\n      <form className=\"needs-validation\" onSubmit={handleSubmit}>\r\n        <MDBRow>\r\n          <MDBCol md=\"4\">\r\n            <MDBInput\r\n              name=\"subject_code\"\r\n              type=\"text\"\r\n              id=\"subject_code\"\r\n              label=\"SubjectCode\"\r\n              required\r\n              {...bindSubjectCode}\r\n            ></MDBInput>\r\n          </MDBCol>\r\n          <MDBCol md=\"4\">\r\n            <MDBInput\r\n              name=\"subject_name\"\r\n              type=\"text\"\r\n              id=\"subject_name\"\r\n              label=\"SubjectName\"\r\n              required\r\n              {...bindSubjectName}\r\n            ></MDBInput>\r\n          </MDBCol>\r\n          <MDBCol md=\"2\">\r\n            <MDBBtn color=\"success\" type=\"submit\">\r\n              SAVE\r\n            </MDBBtn>\r\n          </MDBCol>\r\n        </MDBRow>\r\n        <hr />\r\n      </form>\r\n      <TableContainer component={Paper}>\r\n        <Table aria-label=\"simple table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>Subject Code</TableCell>\r\n              <TableCell>Subject Name</TableCell>\r\n\r\n              <TableCell>Action</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {Subject.map((row) => (\r\n              <TableRow key={row.subject_name}>\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                  {row.subject_code}\r\n                </TableCell>\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                  {row.subject_name}\r\n                </TableCell>\r\n\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                  <EditIcon color=\"primary\" onClick={() => editSubject(row)} />\r\n\r\n                  <DeleteIcon\r\n                    color=\"secondary\"\r\n                    onClick={() => deleteSubject(row.subject_id)}\r\n                  />\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PatientRegistration;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport Helper from \"../Common/Helper\";\r\nimport { MDBBtn } from \"mdbreact\";\r\nconst DatatablePage = () => {\r\n  const [Subject, setSubject] = useState([]);\r\n  useEffect(() => {\r\n    (async function () {\r\n      try {\r\n        const response = await fetch(Helper.getUrl() + \"subject\");\r\n        const json = await response.json();\r\n        setSubject(json.data);\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    })();\r\n  }, []);\r\n  function deleteSubject(id) {\r\n    console.log(id);\r\n    fetch(Helper.getUrl() + \"subject\", {\r\n      method: \"DELETE\",\r\n      body: JSON.stringify({\r\n        subject_id: id,\r\n      }),\r\n      headers: {\r\n        \"Content-type\": \"application/json; charset=UTF-8\",\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((json) => console.log(json));\r\n  }\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table aria-label=\"simple table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Subject Code</TableCell>\r\n            <TableCell>Subject Name</TableCell>\r\n\r\n            <TableCell>Action</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {Subject.map((row) => (\r\n            <TableRow key={row.subject_name}>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                {row.subject_code}\r\n              </TableCell>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                {row.subject_name}\r\n              </TableCell>\r\n\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  size=\"small\"\r\n                  onClick={() => deleteSubject(row.subject_id)}\r\n                  startIcon={<DeleteIcon />}\r\n                >\r\n                  DELETE\r\n                </Button>\r\n              </TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n};\r\n\r\nexport default DatatablePage;\r\n","import React from \"react\";\nimport \"./App.css\";\n\nimport NavbarPage from \"./Components/Common/NavbarPage\";\nimport FooterPage from \"./Components/Common/FooterPage\";\nimport { Header } from \"./Header\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport PatientRegistration from \"./Components/Patient/PatientRegistration\";\nimport PatientList from \"./Components/Patient/PatientList\";\nfunction App() {\n  return (\n    <Router>\n      <React.Fragment>\n        <NavbarPage />\n        <Switch>\n          <Route\n            path=\"/PatientRegistration\"\n            component={() => <PatientRegistration />}\n          />\n          <Route path=\"/PatientList\" component={() => <PatientList />} />\n        </Switch>\n      </React.Fragment>\n    </Router>\n  );\n}\n\nexport default App;\n\n/*\nimport React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { Header } from \"./Header\";\n\nconst Login = () => <div>Login</div>;\nconst Home = () => <div>Home</div>;\n\nconst App = () => {\n  return (\n    <Router>\n      <React.Fragment>\n        <Header />\n        <Switch>\n          <Route path=\"/login\" component={() => <Login />} />\n          <Route path=\"/home\" component={() => <Home />} />\n        </Switch>\n      </React.Fragment>\n    </Router>\n  );\n};\n\nexport default App;\n*/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}